// profiles

profiles {
	conda {
        process {
			withLabel: "abricate" { 
				conda = "${projectDir}/conda/bugflow_abricate.yaml"
			}

			withLabel: "amr_finder" { 
				conda = "${projectDir}/conda/bugflow_amr_finder.yaml"
			}

			withLabel: "blast" { 
				conda = "${projectDir}/conda/bugflow_blast.yaml"
			}

			withLabel: "mob_suite" { 
				conda = "${projectDir}/conda/bugflow_mob_suite.yaml"
			}

			withLabel: "non_perl" { 
				conda = "${projectDir}/conda/bugflow_non_perl.yaml"
			}

			withLabel: "platon" { 
				conda = "${projectDir}/conda/bugflow_platon.yaml"
			}

			withLabel: "quast" { 
				conda = "${projectDir}/conda/bugflow_quast.yaml"
			}

			withLabel: "shovill" { 
				conda = "${projectDir}/conda/bugflow_shovill.yaml"
			}

			withLabel: "snippy" { 
				conda = "${projectDir}/conda/bugflow_snippy.yaml"
			}
		}

        conda.cacheDir = "${projectDir}/conda"
		conda.useMamba = true
    }

	docker {
		process {
			withLabel: "abricate" { 
				container = "${projectDir}/conda/bugflow_abricate.yaml"
			}

			withLabel: "amr_finder" { 
				container = "${projectDir}/conda/bugflow_amr_finder.yaml"
			}

			withLabel: "blast" { 
				container = "${projectDir}/conda/bugflow_blast.yaml"
			}

			withLabel: "mob_suite" { 
				container = "${projectDir}/conda/bugflow_mob_suite.yaml"
			}

			withLabel: "non_perl" { 
				container = "${projectDir}/conda/bugflow_non_perl.yaml"
			}

			withLabel: "platon" { 
				container = "${projectDir}/conda/bugflow_platon.yaml"
			}

			withLabel: "quast" { 
				container = "${projectDir}/conda/bugflow_quast.yaml"
			}

			withLabel: "shovill" { 
				container = "${projectDir}/conda/bugflow_shovill.yaml"
			}

			withLabel: "snippy" { 
				container = "${projectDir}/conda/bugflow_snippy.yaml"
			}
		}

        docker.enabled = true
	}

	oci {
		workDir = "/mnt/scratch/work"
		process {
			cpus = 4 
		}
	}
}

// description
manifest {
    homePage = 'https://github.com/oxfordmmm/Bugflow_DSL2'
    description = 'Pipeline for mapping, variant calling and assembling bacterial sequencing data'
    mainScript = 'main.nf'
    version = '0.2'
}

// error options 
//default halt pipeline
//process.errorStrategy {task.attempt==1 ? 'retry' : 'finish'} //this only completes already pending tasks
//process.errorStrategy = 'ignore' //this logs the error, prevents subsequent tasks running, but continues other samples


// reporting
report {
	enabled = true
	file = "nextflow_reports/report.html"
}

timeline {
	enabled = true
	file = "nextflow_reports/timeline.html"
}
